[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAccounts = Package['accounts-base'].Accounts;\nGoogle = Package['google-oauth'].Google;\nGithub = Package['github-oauth'].Github;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"methods\":{\"methods.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// methods/methods.js                                                //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nMeteor.methods({\n  agregarPelicula: function (titulo) {\n    Peliculas.insert({\n      titulo: titulo,\n      createdAt: new Date(),\n      owner: Meteor.userId()\n    });\n  },\n  actualizarPelicula: function (id, checked) {\n    Peliculas.update(id, {\n      $set: {\n        checked: checked\n      }\n    });\n  },\n  eliminarPelicula: function (id) {\n    Peliculas.remove(id);\n  },\n  setPrivate: function (id, private) {\n    var pel = Peliculas.findOne(id);\n\n    if (pel.owner !== Meteor.userId()) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Peliculas.update(id, {\n      $set: {\n        private: private\n      }\n    });\n  }\n});\n///////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nrequire(\"./methods/methods.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["methods/methods.js"],"names":["Meteor","module","watch","require","v","methods","agregarPelicula","titulo","Peliculas","insert","createdAt","Date","owner","userId","actualizarPelicula","id","checked","update","$set","eliminarPelicula","remove","setPrivate","private","pel","findOne","Error"],"mappings":";;;;;;;;AAAA,IAAIA,MAAJ;AAAWC,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACH,SAAOI,CAAP,EAAS;AAACJ,aAAOI,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAEXJ,OAAOK,OAAP,CAAe;AACbC,mBAAiB,UAASC,MAAT,EAAiB;AAChCC,cAAUC,MAAV,CAAiB;AACfF,cAAQA,MADO;AAEfG,iBAAW,IAAIC,IAAJ,EAFI;AAGfC,aAAOZ,OAAOa,MAAP;AAHQ,KAAjB;AAKD,GAPY;AAQbC,sBAAoB,UAASC,EAAT,EAAaC,OAAb,EAAsB;AACxCR,cAAUS,MAAV,CAAiBF,EAAjB,EAAqB;AAACG,YAAM;AAACF,iBAASA;AAAV;AAAP,KAArB;AACD,GAVY;AAWbG,oBAAkB,UAASJ,EAAT,EAAa;AAC7BP,cAAUY,MAAV,CAAiBL,EAAjB;AACD,GAbY;AAcbM,cAAY,UAASN,EAAT,EAAaO,OAAb,EAAsB;AAChC,QAAIC,MAAMf,UAAUgB,OAAV,CAAkBT,EAAlB,CAAV;;AAEA,QAAIQ,IAAIX,KAAJ,KAAcZ,OAAOa,MAAP,EAAlB,EAAmC;AACjC,YAAM,IAAIb,OAAOyB,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAEDjB,cAAUS,MAAV,CAAiBF,EAAjB,EAAqB;AAACG,YAAM;AAACI,iBAASA;AAAV;AAAP,KAArB;AACD;AAtBY,CAAf,E","file":"/app.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nMeteor.methods({\n  agregarPelicula: function(titulo) {\n    Peliculas.insert({\n      titulo: titulo,\n      createdAt: new Date(),\n      owner: Meteor.userId()\n    });\n  },\n  actualizarPelicula: function(id, checked) {\n    Peliculas.update(id, {$set: {checked: checked}});\n  },\n  eliminarPelicula: function(id) {\n    Peliculas.remove(id);\n  },\n  setPrivate: function(id, private) {\n    var pel = Peliculas.findOne(id);\n\n    if (pel.owner !== Meteor.userId()) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Peliculas.update(id, {$set: {private: private}});\n  }\n});\n"]}}]