{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"methods/methods.js","filenameRelative":"methods/methods.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"methods/methods.js.map","sourceFileName":"methods/methods.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"methods"},"ignored":false,"code":"var Meteor = void 0;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nMeteor.methods({\n  agregarPelicula: function (titulo) {\n    Peliculas.insert({\n      titulo: titulo,\n      createdAt: new Date(),\n      owner: Meteor.userId()\n    });\n  },\n  actualizarPelicula: function (id, checked) {\n    Peliculas.update(id, {\n      $set: {\n        checked: checked\n      }\n    });\n  },\n  eliminarPelicula: function (id) {\n    var pel = Peliculas.findOne(id);\n\n    if (pel.owner !== Meteor.userId()) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Peliculas.remove(id);\n  },\n  setPrivate: function (id, private) {\n    var pel = Peliculas.findOne(id);\n\n    if (pel.owner !== Meteor.userId()) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Peliculas.update(id, {\n      $set: {\n        \"private\": private\n      }\n    });\n  }\n});","map":{"version":3,"sources":["methods/methods.js"],"names":["Meteor","module","watch","require","v","methods","agregarPelicula","titulo","Peliculas","insert","createdAt","Date","owner","userId","actualizarPelicula","id","checked","update","$set","eliminarPelicula","pel","findOne","Error","remove","setPrivate","private"],"mappings":"AAAA,IAAIA,eAAJ;AAAWC,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACH,QAAD,YAAQI,CAAR,EAAU;AAACJ,aAAOI,CAAP;AAAS;AAApB,CAAtC,EAA4D,CAA5D;AAEXJ,OAAOK,OAAP,CAAe;AACbC,mBAAiB,UAASC,MAAT,EAAiB;AAChCC,cAAUC,MAAV,CAAiB;AACfF,cAAQA,MADO;AAEfG,iBAAW,IAAIC,IAAJ,EAFI;AAGfC,aAAOZ,OAAOa,MAAP;AAHQ,KAAjB;AAKD,GAPY;AAQbC,sBAAoB,UAASC,EAAT,EAAaC,OAAb,EAAsB;AAExCR,cAAUS,MAAV,CAAiBF,EAAjB,EAAqB;AAACG,YAAM;AAACF,iBAASA;AAAV;AAAP,KAArB;AACD,GAXY;AAYbG,oBAAkB,UAASJ,EAAT,EAAa;AAC7B,QAAIK,MAAMZ,UAAUa,OAAV,CAAkBN,EAAlB,CAAV;;AAEA,QAAIK,IAAIR,KAAJ,KAAcZ,OAAOa,MAAP,EAAlB,EAAmC;AACjC,YAAM,IAAIb,OAAOsB,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAEDd,cAAUe,MAAV,CAAiBR,EAAjB;AACD,GApBY;AAqBbS,cAAY,UAAST,EAAT,EAAaU,OAAb,EAAsB;AAChC,QAAIL,MAAMZ,UAAUa,OAAV,CAAkBN,EAAlB,CAAV;;AAEA,QAAIK,IAAIR,KAAJ,KAAcZ,OAAOa,MAAP,EAAlB,EAAmC;AACjC,YAAM,IAAIb,OAAOsB,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAEDd,cAAUS,MAAV,CAAiBF,EAAjB,EAAqB;AAACG,YAAM;AAAC,mBAASO;AAAV;AAAP,KAArB;AACD;AA7BY,CAAf","file":"methods/methods.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nMeteor.methods({\n  agregarPelicula: function(titulo) {\n    Peliculas.insert({\n      titulo: titulo,\n      createdAt: new Date(),\n      owner: Meteor.userId()\n    });\n  },\n  actualizarPelicula: function(id, checked) {\n    \n    Peliculas.update(id, {$set: {checked: checked}});\n  },\n  eliminarPelicula: function(id) {\n    var pel = Peliculas.findOne(id);\n\n    if (pel.owner !== Meteor.userId()) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Peliculas.remove(id);\n  },\n  setPrivate: function(id, private) {\n    var pel = Peliculas.findOne(id);\n\n    if (pel.owner !== Meteor.userId()) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Peliculas.update(id, {$set: {private: private}});\n  }\n});\n"]},"hash":"85489da3f8293715d05de9eb26d05127536fbf1a"}
